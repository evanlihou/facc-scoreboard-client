{"version":3,"sources":["images/bg.jpg","images/rocket.jpg","matchStateComponents/scoresPosted.js","matchStateComponents/matchTimer.js","matchStateComponents/audienceDisplay.js","adminDisplay.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ScoresPosted","currentMatch","this","props","redAlliance","blueAlliance","react_default","a","createElement","id","className","teams","map","team","key","totalPoints","scoringDetails","sandstorm","level1","level2","hatchPanels","cargo","habClimb","level3","fouls","techFouls","habDocking","completeRocket","Component","MatchTimer","AudienceDisplay","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","_this2","setState","socket","on","updatedMatch","console","log","eventName","matchType","matchNumber","posted","scoresPosted","pending","inProgress","matchTimer","eStop","matchStatus","AdminDisplay","updateMatch","object","emit","objectSpread","_id","newMatch","Button","onClick","App","openSocket","window","io","Switch","Route","path","component","adminDisplay","audienceDisplay","Boolean","location","hostname","match","ReactDOM","render","BrowserRouter","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d30b3b55.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.2f3ac5e2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rocket.b9e643ff.jpg\";","import React, { Component } from 'react';\n\nclass ScoresPosted extends Component {\n  render() {\n    let currentMatch = this.props.currentMatch;\n    let redAlliance = currentMatch.redAlliance;\n    let blueAlliance = currentMatch.blueAlliance;\n    return (\n      <div id=\"scoreInfo\">\n        <div id=\"redScore\">\n          <div className=\"teams\">\n            Teams\n            <ul>\n              {currentMatch.redAlliance.teams.map(team => (\n                <li key={team}>{team}</li>\n              ))}\n            </ul>\n          </div>\n          <div className=\"pointsBreakdown\">\n            <div className=\"scoreBox\">\n              <span className=\"score\">{redAlliance.totalPoints}</span>\n              <span className=\"win\">\n                {redAlliance.totalPoints > blueAlliance.totalPoints\n                  ? 'WIN'\n                  : ''}\n              </span>\n            </div>\n\n            <span className=\"sandstorm\">\n              Sandstorm:{' '}\n              <b>\n                {redAlliance.scoringDetails.sandstorm.level1 * 3 +\n                  redAlliance.scoringDetails.sandstorm.level2 * 6}\n              </b>\n            </span>\n            <span className=\"hatch\">\n              Hatch: <b>{redAlliance.scoringDetails.hatchPanels}</b>\n            </span>\n            <span className=\"cargo\">\n              Cargo: <b>{redAlliance.scoringDetails.cargo}</b>\n            </span>\n            <span className=\"climb\">\n              Climb:{' '}\n              <b>\n                {redAlliance.scoringDetails.habClimb.level1 * 3 +\n                  redAlliance.scoringDetails.habClimb.level2 * 6 +\n                  redAlliance.scoringDetails.habClimb.level3 * 12}\n              </b>\n            </span>\n            <span className=\"fouls\">\n              Blue Fouls:{' '}\n              <b>{blueAlliance.fouls * 3 + blueAlliance.techFouls * 10}</b>\n            </span>\n          </div>\n          <div className=\"rpBreakdown\">\n            <span\n              className={\n                'docking ' +\n                (redAlliance.scoringDetails.habDocking ? 'won' : 'lost')\n              }\n            >\n              Docking\n            </span>\n            <span\n              className={\n                'rocket ' +\n                (redAlliance.scoringDetails.completeRocket ? 'won' : 'lost')\n              }\n            >\n              Rocket\n            </span>\n          </div>\n        </div>\n        <div id=\"blueScore\">\n          <div className=\"teams\">\n            Teams\n            <ul>\n              {blueAlliance.teams.map(team => (\n                <li key={team}>{team}</li>\n              ))}\n            </ul>\n          </div>\n          <div className=\"pointsBreakdown\">\n            <div className=\"scoreBox\">\n              <span className=\"score\">{blueAlliance.totalPoints}</span>\n              <span className=\"win\">\n                {blueAlliance.totalPoints > redAlliance.totalPoints\n                  ? 'WIN'\n                  : ''}\n              </span>\n            </div>\n\n            <span className=\"sandstorm\">\n              Sandstorm:{' '}\n              <b>\n                {blueAlliance.scoringDetails.sandstorm.level1 * 3 +\n                  blueAlliance.scoringDetails.sandstorm.level2 * 6}\n              </b>\n            </span>\n            <span className=\"hatch\">\n              Hatch: <b>{blueAlliance.scoringDetails.hatchPanels}</b>\n            </span>\n            <span className=\"cargo\">\n              Cargo: <b>{blueAlliance.scoringDetails.cargo}</b>\n            </span>\n            <span className=\"climb\">\n              Climb:{' '}\n              <b>\n                {blueAlliance.scoringDetails.habClimb.level1 * 3 +\n                  blueAlliance.scoringDetails.habClimb.level2 * 6 +\n                  blueAlliance.scoringDetails.habClimb.level3 * 12}\n              </b>\n            </span>\n            <span className=\"fouls\">\n              Red Fouls:{' '}\n              <b>{redAlliance.fouls * 3 + redAlliance.techFouls * 10}</b>\n            </span>\n          </div>\n          <div className=\"rpBreakdown\">\n            <span\n              className={\n                'docking ' +\n                (blueAlliance.scoringDetails.habDocking ? 'won' : 'lost')\n              }\n            >\n              Docking\n            </span>\n            <span\n              className={\n                'rocket ' +\n                (blueAlliance.scoringDetails.completeRocket ? 'won' : 'lost')\n              }\n            >\n              Rocket\n            </span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ScoresPosted;\n","import React, { Component } from 'react';\n\nclass MatchTimer extends Component {\n  render() {\n    return <h1>todo</h1>;\n  }\n}\n\nexport default MatchTimer;\n","import React, { Component } from 'react';\n\nimport '../images/bg.jpg';\nimport '../images/rocket.jpg';\nimport '../Scoreboard.css';\n\n// import { subscribeToMatchUpdates } from '../socket';\nimport ScoresPosted from './scoresPosted';\nimport MatchTimer from './matchTimer';\n\nclass AudienceDisplay extends Component {\n  constructor(props) {\n    super(props);\n    // subscribeToMatchUpdates(updatedMatch =>\n    //   this.setState({ currentMatch: updatedMatch })\n    // );\n    // state.currentMatch = this.props.currentMatch;\n  }\n  state = {\n    currentMatch: null\n  };\n  componentWillMount(props) {\n    this.setState({ currentMatch: this.props.currentMatch });\n    this.props.socket.on('updateMatch', updatedMatch => {\n      console.log('UPDATE', updatedMatch);\n      this.setState({ currentMatch: updatedMatch });\n    });\n  }\n  render() {\n    let currentMatch = this.state.currentMatch;\n    if (currentMatch) {\n      return (\n        <div className=\"app\">\n          <div id=\"background\" />\n          <div id=\"rocket\" />\n          <div id=\"MatchInfo\">\n            <span id=\"eventName\">{currentMatch.eventName}</span>\n            <span id=\"matchName\">\n              {currentMatch.matchType + ' ' + currentMatch.matchNumber}\n            </span>\n          </div>\n          {\n            {\n              posted: <ScoresPosted currentMatch={currentMatch} />,\n              pending: <h1>Match is Pending</h1>,\n              inProgress: <MatchTimer currentMatch={currentMatch} />,\n              eStop: <h1 className=\"red\">EMERGENCY STOP</h1>\n            }[currentMatch.matchStatus]\n          }\n        </div>\n      );\n    } else {\n      return 'loading';\n    }\n  }\n}\n\nexport default AudienceDisplay;\n","import React, { Component } from 'react';\n\nimport { Button, Menu } from 'semantic-ui-react';\nimport { Redirect } from 'react-router-dom';\nimport 'semantic-ui-css/semantic.min.css';\n\nclass AdminDisplay extends Component {\n  // static contextTypes = {\n  //   router: React.PropTypes.object\n  // };\n\n  constructor(props) {\n    super(props);\n    // subscribeToMatchUpdates(updatedMatch =>\n    //   this.setState({ currentMatch: updatedMatch })\n    // );\n    // var socket = this.props.socket;\n  }\n  state = { currentMatch: null };\n\n  componentWillMount(props) {\n    this.setState({ currentMatch: this.props.currentMatch });\n    this.props.socket.on('updateMatch', updatedMatch => {\n      console.log('UPDATE');\n      this.setState({ currentMatch: updatedMatch });\n    });\n  }\n\n  updateMatch = object => {\n    return () => {\n      this.props.socket.emit('updateMatch', {\n        ...object,\n        _id: this.state.currentMatch._id\n      });\n    };\n  };\n\n  newMatch = () => {\n    this.props.socket.emit('newMatch');\n  };\n\n  render() {\n    return (\n      <div id=\"adminDisplay\">\n        <Button\n          onClick={this.updateMatch({\n            matchStatus: 'posted'\n          })}\n        >\n          Post Scores\n        </Button>\n        <Button onClick={this.newMatch}>New Match</Button>\n      </div>\n    );\n  }\n}\n\nexport default AdminDisplay;\n","import React, { Component } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport AudienceDisplay from './matchStateComponents/audienceDisplay';\nimport AdminDisplay from './adminDisplay';\n\nimport { subscribeToMatchUpdates } from './socket';\nimport openSocket from 'socket.io-client';\n\nclass App extends Component {\n  // socket;\n  constructor(props) {\n    super(props);\n    this.socket = openSocket('http://localhost:9000');\n    window.io = this.socket.io;\n    // this.socket.on('updateMatch', updatedMatch => {\n    //   console.log('UPDATE');\n    //   this.setState({ currentMatch: updatedMatch });\n    // });\n  }\n  state = { currentMatch: null };\n\n  render() {\n    return (\n      <Switch>\n        <Route\n          path=\"/admin\"\n          component={() => (\n            <AdminDisplay\n              currentMatch={this.state.currentMatch}\n              socket={this.socket}\n            />\n          )}\n          // currentMatch={this.state.currentMatch}\n        />\n        <Route\n          path=\"/\"\n          component={() => (\n            <AudienceDisplay\n              currentMatch={this.state.currentMatch}\n              socket={this.socket}\n            />\n          )}\n          // currentMatch={this.state.currentMatch}\n        />\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}