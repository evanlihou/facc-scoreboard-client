{"version":3,"sources":["images/bg.jpg","images/rocket.jpg","matchStateComponents/scoresPosted.js","matchStateComponents/matchTimer.js","matchStateComponents/audienceDisplay.js","adminDisplay.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ScoresPosted","currentMatch","this","props","redAlliance","blueAlliance","react_default","a","createElement","id","className","teams","map","team","key","totalPoints","scoringDetails","sandstorm","level1","level2","hatchPanels","cargo","habClimb","level3","fouls","techFouls","habDocking","completeRocket","Component","moment","require","MatchTimer","state","startedAtMoment","matchState","_this2","setState","startedAt","socket","on","updatedMatch","gameTime","tMinus","_this3","setInterval","duration","diff","as","forceUpdate","toFixed","Math","floor","String","Number","parseFloat","substring","style","marginTop","minWidth","AudienceDisplay","console","log","connected","eventName","matchType","matchNumber","posted","scoresPosted","pending","inProgress","matchTimer","eStop","matchStatus","AdminDisplay","updateMatch","object","_this","emit","Object","objectSpread","_id","newMatch","changeField","e","data","_this$props$socket$em","defineProperty","name","value","changeMultilineField","split","changeCheckbox","_this$props$socket$em2","checked","setCurrentMatch","matches","matchHistory","Container","Message","info","Button","onClick","setStart","color","Form","Input","autoComplete","label","onChange","Group","widths","fluid","margin","TextArea","lines","join","Checkbox","Table","celled","Header","Row","HeaderCell","Body","match","Cell","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","openSocket","window","location","hostname","io","Switch","Route","path","component","adminDisplay","audienceDisplay","Boolean","ReactDOM","render","BrowserRouter","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.99bd6827.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.2f3ac5e2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rocket.b9e643ff.jpg\";","import React, { Component } from 'react';\n\nclass ScoresPosted extends Component {\n  render() {\n    let currentMatch = this.props.currentMatch;\n    let redAlliance = currentMatch.redAlliance;\n    let blueAlliance = currentMatch.blueAlliance;\n    return (\n      <div id=\"scoreInfo\">\n        <div id=\"redScore\">\n          <div className=\"teams\">\n            Teams\n            <ul>\n              {currentMatch.redAlliance.teams.map(team => (\n                <li key={team}>{team}</li>\n              ))}\n            </ul>\n          </div>\n          <div className=\"pointsBreakdown\">\n            <div className=\"scoreBox\">\n              <span className=\"score\">{redAlliance.totalPoints}</span>\n              <span className=\"win\">\n                {redAlliance.totalPoints > blueAlliance.totalPoints\n                  ? 'WIN'\n                  : ''}\n              </span>\n            </div>\n\n            <span className=\"sandstorm\">\n              Sandstorm:{' '}\n              <b>\n                {redAlliance.scoringDetails.sandstorm.level1 * 3 +\n                  redAlliance.scoringDetails.sandstorm.level2 * 6}\n              </b>\n            </span>\n            <span className=\"hatch\">\n              Hatch: <b>{redAlliance.scoringDetails.hatchPanels * 2}</b>\n            </span>\n            <span className=\"cargo\">\n              Cargo: <b>{redAlliance.scoringDetails.cargo * 3}</b>\n            </span>\n            <span className=\"climb\">\n              Climb:{' '}\n              <b>\n                {redAlliance.scoringDetails.habClimb.level1 * 3 +\n                  redAlliance.scoringDetails.habClimb.level2 * 6 +\n                  redAlliance.scoringDetails.habClimb.level3 * 12}\n              </b>\n            </span>\n            <span className=\"fouls\">\n              Blue Fouls:{' '}\n              <b>{blueAlliance.fouls * 3 + blueAlliance.techFouls * 10}</b>\n            </span>\n          </div>\n          <div className=\"rpBreakdown\">\n            <span\n              className={\n                'docking ' +\n                (redAlliance.scoringDetails.habDocking ? 'won' : 'lost')\n              }\n            >\n              Docking\n            </span>\n            <span\n              className={\n                'rocket ' +\n                (redAlliance.scoringDetails.completeRocket ? 'won' : 'lost')\n              }\n            >\n              Rocket\n            </span>\n          </div>\n        </div>\n        <div id=\"blueScore\">\n          <div className=\"teams\">\n            Teams\n            <ul>\n              {blueAlliance.teams.map(team => (\n                <li key={team}>{team}</li>\n              ))}\n            </ul>\n          </div>\n          <div className=\"pointsBreakdown\">\n            <div className=\"scoreBox\">\n              <span className=\"score\">{blueAlliance.totalPoints}</span>\n              <span className=\"win\">\n                {blueAlliance.totalPoints > redAlliance.totalPoints\n                  ? 'WIN'\n                  : ''}\n              </span>\n            </div>\n\n            <span className=\"sandstorm\">\n              Sandstorm:{' '}\n              <b>\n                {blueAlliance.scoringDetails.sandstorm.level1 * 3 +\n                  blueAlliance.scoringDetails.sandstorm.level2 * 6}\n              </b>\n            </span>\n            <span className=\"hatch\">\n              Hatch: <b>{blueAlliance.scoringDetails.hatchPanels * 2}</b>\n            </span>\n            <span className=\"cargo\">\n              Cargo: <b>{blueAlliance.scoringDetails.cargo * 3}</b>\n            </span>\n            <span className=\"climb\">\n              Climb:{' '}\n              <b>\n                {blueAlliance.scoringDetails.habClimb.level1 * 3 +\n                  blueAlliance.scoringDetails.habClimb.level2 * 6 +\n                  blueAlliance.scoringDetails.habClimb.level3 * 12}\n              </b>\n            </span>\n            <span className=\"fouls\">\n              Red Fouls:{' '}\n              <b>{redAlliance.fouls * 3 + redAlliance.techFouls * 10}</b>\n            </span>\n          </div>\n          <div className=\"rpBreakdown\">\n            <span\n              className={\n                'docking ' +\n                (blueAlliance.scoringDetails.habDocking ? 'won' : 'lost')\n              }\n            >\n              Docking\n            </span>\n            <span\n              className={\n                'rocket ' +\n                (blueAlliance.scoringDetails.completeRocket ? 'won' : 'lost')\n              }\n            >\n              Rocket\n            </span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ScoresPosted;\n","import React, { Component } from 'react';\n// import Moment from 'moment';\nconst moment = require('moment');\n\nclass MatchTimer extends Component {\n  state = {\n    // currentMatch: null,\n    startedAtMoment: null,\n    matchState: null\n  };\n  componentWillMount(props) {\n    // console.log(moment());\n    // this.setState({ currentMatch: this.props.currentMatch });\n    this.setState({\n      // currentMatch: updatedMatch,\n      startedAtMoment: moment(this.props.currentMatch.startedAt)\n    });\n    this.props.socket.on('updateMatch', updatedMatch => {\n      // console.log('UPDATEEEE', updatedMatch);\n      // console.log(updatedMatch.startedAt);\n      // console.log(moment(updatedMatch.startedAt));\n      this.setState({\n        // currentMatch: updatedMatch,\n        startedAtMoment: moment(updatedMatch.startedAt)\n      });\n      // console.log(this.state.startedAtMoment);\n    });\n  }\n\n  componentDidMount() {\n    let gameTime;\n    let tMinus;\n    setInterval(() => {\n      gameTime = moment\n        .duration(moment().diff(this.state.startedAtMoment))\n        .as('seconds');\n      tMinus = 150 - gameTime;\n      if (gameTime < 0) {\n        this.setState({ matchState: 'Ready' });\n      } else if (tMinus < 150 && tMinus > 135) {\n        this.setState({ matchState: 'Sandstorm' });\n      } else if (tMinus < 135 && tMinus > 0) {\n        this.setState({ matchState: 'Normal Play' });\n      } else if (tMinus <= 0) {\n        this.setState({ matchState: 'Scores Pending' });\n      }\n      this.forceUpdate();\n    }, 50);\n  }\n\n  render() {\n    if (this.props.currentMatch && this.state.startedAtMoment) {\n      let gameTime = moment\n        .duration(moment().diff(this.state.startedAtMoment))\n        .as('seconds')\n        .toFixed(2);\n      let tMinus = 150 - gameTime;\n      return (\n        <div>\n          <h1 className=\"big\">\n            {this.state.matchState}\n            <br />\n\n            {this.state.matchState === 'Ready' ? (\n              <span>\n                {Math.floor(gameTime)}\n                <small>\n                  {String(\n                    Number.parseFloat(gameTime - Math.floor(gameTime)).toFixed(\n                      2\n                    )\n                  ).substring(1)}\n                </small>\n              </span>\n            ) : this.state.matchState !== 'Scores Pending' ? (\n              <span>\n                {Math.floor(tMinus)}\n                <small>\n                  {String(\n                    Number.parseFloat(tMinus - Math.floor(tMinus)).toFixed(2)\n                  ).substring(1)}\n                </small>\n              </span>\n            ) : null}\n          </h1>\n          <div id=\"scoreInfo\" style={{ marginTop: '5%' }}>\n            <div id=\"redBox\" style={{ minWidth: '20%' }}>\n              <div className=\"teams\">\n                Teams\n                <ul>\n                  {this.props.currentMatch.redAlliance.teams.map(team => (\n                    <li key={team}>{team}</li>\n                  ))}\n                </ul>\n              </div>\n            </div>\n            <div id=\"blueBox\" style={{ minWidth: '20%' }}>\n              <div className=\"teams\">\n                Teams\n                <ul>\n                  {this.props.currentMatch.blueAlliance.teams.map(team => (\n                    <li key={team}>{team}</li>\n                  ))}\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    }\n    return <h1>test</h1>;\n  }\n}\n\nexport default MatchTimer;\n","import React, { Component } from 'react';\n\nimport '../images/bg.jpg';\nimport '../images/rocket.jpg';\nimport '../Scoreboard.css';\n\nimport ScoresPosted from './scoresPosted';\nimport MatchTimer from './matchTimer';\n\nclass AudienceDisplay extends Component {\n  state = {\n    currentMatch: null\n  };\n  componentWillMount(props) {\n    this.setState({ currentMatch: this.props.currentMatch });\n    this.props.socket.on('updateMatch', updatedMatch => {\n      console.log('UPDATE', updatedMatch);\n      this.setState({ currentMatch: updatedMatch });\n    });\n  }\n  render() {\n    let currentMatch = this.state.currentMatch;\n    return (\n      <div className=\"app\">\n        <div id=\"background\" />\n        <div id=\"rocket\" />\n        {!this.props.socket.connected ? (\n          <h1 className=\"red\">Not connected to websocket</h1>\n        ) : null}\n        {currentMatch ? (\n          <div>\n            <div id=\"MatchInfo\">\n              <span id=\"eventName\">{currentMatch.eventName}</span>\n              <span id=\"matchName\">\n                {currentMatch.matchType + ' ' + currentMatch.matchNumber}\n              </span>\n            </div>\n            {\n              {\n                posted: <ScoresPosted currentMatch={currentMatch} />,\n                pending: (\n                  <div>\n                    <h1>Match is Pending</h1>\n                    <div id=\"scoreInfo\" style={{ marginTop: '5%' }}>\n                      <div id=\"redBox\" style={{ minWidth: '20%' }}>\n                        <div className=\"teams\">\n                          Teams\n                          <ul>\n                            {currentMatch.redAlliance.teams.map(team => (\n                              <li key={team}>{team}</li>\n                            ))}\n                          </ul>\n                        </div>\n                      </div>\n                      <div id=\"blueBox\" style={{ minWidth: '20%' }}>\n                        <div className=\"teams\">\n                          Teams\n                          <ul>\n                            {currentMatch.blueAlliance.teams.map(team => (\n                              <li key={team}>{team}</li>\n                            ))}\n                          </ul>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ),\n                inProgress: (\n                  <MatchTimer\n                    currentMatch={currentMatch}\n                    socket={this.props.socket}\n                  />\n                ),\n                eStop: <h1 className=\"red big\">EMERGENCY STOP</h1>\n              }[currentMatch.matchStatus]\n            }\n          </div>\n        ) : (\n          <h1 className=\"lonelyH1\">No current match</h1>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default AudienceDisplay;\n","import React, { Component } from 'react';\n\nimport { Button, Form, Container, Message, Table } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\n\nclass AdminDisplay extends Component {\n  state = { currentMatch: null };\n\n  componentWillMount(props) {\n    this.setState({ currentMatch: this.props.currentMatch });\n    this.props.socket.on('updateMatch', updatedMatch => {\n      console.log('UPDATE');\n      this.setState({ currentMatch: updatedMatch });\n      this.props.socket.emit('getMatchHistory');\n      console.log(updatedMatch);\n    });\n\n    this.props.socket.on('matchHistory', matches => {\n      console.log('Received Match History');\n      this.setState({ matchHistory: matches });\n    });\n  }\n\n  updateMatch = object => {\n    return () => {\n      this.props.socket.emit('updateMatch', {\n        ...object,\n        _id: this.state.currentMatch._id\n      });\n    };\n  };\n\n  newMatch = () => {\n    this.props.socket.emit('newMatch');\n  };\n\n  changeField = (e, data) => {\n    this.props.socket.emit('updateMatch', {\n      [data.name]: data.value || '0',\n      _id: this.state.currentMatch._id\n    });\n  };\n\n  changeMultilineField = (e, data) => {\n    data.value = data.value.split('\\n');\n    this.changeField(e, data);\n  };\n\n  changeCheckbox = (e, data) => {\n    this.props.socket.emit('updateMatch', {\n      [data.name]: data.checked,\n      _id: this.state.currentMatch._id\n    });\n  };\n\n  setCurrentMatch = (e, data) => {\n    console.log(e, data);\n    this.props.socket.emit('setCurrentMatch', data.value);\n  };\n\n  render() {\n    if (this.state.currentMatch) {\n      var redAlliance = this.state.currentMatch.redAlliance;\n      var blueAlliance = this.state.currentMatch.blueAlliance;\n    }\n    return (\n      <Container id=\"adminDisplay\">\n        <Message info>\n          <b>\n            NOTE: Values here should be counts (e.g.: number of hatches), not\n            the point values. Point values will be calculated\n          </b>\n        </Message>\n        <Button onClick={this.newMatch}>New Match</Button>\n        {this.state.currentMatch && (\n          <div style={{ marginTop: '10px' }}>\n            <Button\n              onClick={this.updateMatch({\n                matchStatus: 'inProgress',\n                setStart: true\n              })}\n            >\n              Start Match\n            </Button>\n            <Button\n              color=\"red\"\n              onClick={this.updateMatch({\n                matchStatus: 'eStop'\n              })}\n            >\n              E-STOP\n            </Button>\n            <Button\n              onClick={this.updateMatch({\n                matchStatus: 'posted'\n              })}\n            >\n              Post Scores\n            </Button>\n          </div>\n        )}\n\n        {this.state.currentMatch && (\n          <Form>\n            <Form.Input\n              autoComplete=\"off\"\n              name=\"eventName\"\n              label=\"Event Name\"\n              onChange={this.changeField}\n              value={this.state.currentMatch.eventName}\n            />\n            <Form.Group widths=\"equal\">\n              <Form.Input\n                autoComplete=\"off\"\n                name=\"matchType\"\n                label=\"Match Type\"\n                onChange={this.changeField}\n                value={this.state.currentMatch.matchType}\n              />\n              <Form.Input\n                autoComplete=\"off\"\n                fluid\n                label=\"Match Number\"\n                name=\"matchNumber\"\n                onChange={this.changeField}\n                value={this.state.currentMatch.matchNumber}\n              />\n            </Form.Group>\n            {/* RED SCORING DETAILS */}\n            <div id=\"redBox\" style={{ margin: '10px' }}>\n              <Form.TextArea\n                lines=\"3\"\n                name=\"redAlliance.teams\"\n                label=\"Teams\"\n                onChange={this.changeMultilineField}\n                value={redAlliance.teams.join('\\n')}\n              />\n              <b>Sandstorm</b>\n              <Form.Group widths=\"equal\">\n                <Form.Input\n                  autoComplete=\"off\"\n                  fluid\n                  label=\"Level 1\"\n                  name=\"redAlliance.scoringDetails.sandstorm.level1\"\n                  onChange={this.changeField}\n                  value={redAlliance.scoringDetails.sandstorm.level1}\n                />\n                <Form.Input\n                  autoComplete=\"off\"\n                  fluid\n                  label=\"Level 2\"\n                  name=\"redAlliance.scoringDetails.sandstorm.level2\"\n                  onChange={this.changeField}\n                  value={redAlliance.scoringDetails.sandstorm.level2}\n                />\n              </Form.Group>\n              <Form.Input\n                autoComplete=\"off\"\n                fluid\n                label=\"Hatch Panels\"\n                name=\"redAlliance.scoringDetails.hatchPanels\"\n                onChange={this.changeField}\n                value={redAlliance.scoringDetails.hatchPanels}\n              />\n              <Form.Input\n                autoComplete=\"off\"\n                fluid\n                label=\"Cargo\"\n                name=\"redAlliance.scoringDetails.cargo\"\n                onChange={this.changeField}\n                value={redAlliance.scoringDetails.cargo}\n              />\n              <b>Hab Climb</b>\n              <Form.Group widths=\"equal\">\n                <Form.Input\n                  autoComplete=\"off\"\n                  fluid\n                  label=\"Level 1\"\n                  name=\"redAlliance.scoringDetails.habClimb.level1\"\n                  onChange={this.changeField}\n                  value={redAlliance.scoringDetails.habClimb.level1}\n                />\n                <Form.Input\n                  autoComplete=\"off\"\n                  fluid\n                  label=\"Level 2\"\n                  name=\"redAlliance.scoringDetails.habClimb.level2\"\n                  onChange={this.changeField}\n                  value={redAlliance.scoringDetails.habClimb.level2}\n                />\n                <Form.Input\n                  autoComplete=\"off\"\n                  fluid\n                  label=\"Level 3\"\n                  name=\"redAlliance.scoringDetails.habClimb.level3\"\n                  onChange={this.changeField}\n                  value={redAlliance.scoringDetails.habClimb.level3}\n                />\n              </Form.Group>\n              <b>RP Params</b>\n              <Form.Group widths=\"equal\">\n                <Form.Checkbox\n                  label=\"Hab Docking\"\n                  name=\"redAlliance.scoringDetails.habDocking\"\n                  onChange={this.changeCheckbox}\n                  checked={redAlliance.scoringDetails.habDocking}\n                />\n                <Form.Checkbox\n                  label=\"Complete Rocket\"\n                  name=\"redAlliance.scoringDetails.completeRocket\"\n                  onChange={this.changeCheckbox}\n                  checked={redAlliance.scoringDetails.completeRocket}\n                />\n              </Form.Group>\n              <b>RED Fouls</b>\n              <Form.Group widths=\"equal\">\n                <Form.Input\n                  autoComplete=\"off\"\n                  fluid\n                  label=\"Fouls\"\n                  name=\"redAlliance.fouls\"\n                  onChange={this.changeField}\n                  value={redAlliance.fouls}\n                />\n                <Form.Input\n                  autoComplete=\"off\"\n                  fluid\n                  label=\"Tech Fouls\"\n                  name=\"redAlliance.techFouls\"\n                  onChange={this.changeField}\n                  value={redAlliance.techFouls}\n                />\n              </Form.Group>\n            </div>\n            {/* BLUE SCORING DETAILS */}\n            <div id=\"blueBox\" style={{ margin: '10px' }}>\n              <Form.TextArea\n                lines=\"3\"\n                name=\"blueAlliance.teams\"\n                label=\"Teams\"\n                onChange={this.changeMultilineField}\n                value={blueAlliance.teams.join('\\n')}\n              />\n              <b>Sandstorm</b>\n              <Form.Group widths=\"equal\">\n                <Form.Input\n                  autoComplete=\"off\"\n                  fluid\n                  label=\"Level 1\"\n                  name=\"blueAlliance.scoringDetails.sandstorm.level1\"\n                  onChange={this.changeField}\n                  value={blueAlliance.scoringDetails.sandstorm.level1}\n                />\n                <Form.Input\n                  autoComplete=\"off\"\n                  fluid\n                  label=\"Level 2\"\n                  name=\"blueAlliance.scoringDetails.sandstorm.level2\"\n                  onChange={this.changeField}\n                  value={blueAlliance.scoringDetails.sandstorm.level2}\n                />\n              </Form.Group>\n              <Form.Input\n                autoComplete=\"off\"\n                fluid\n                label=\"Hatch Panels\"\n                name=\"blueAlliance.scoringDetails.hatchPanels\"\n                onChange={this.changeField}\n                value={blueAlliance.scoringDetails.hatchPanels}\n              />\n              <Form.Input\n                autoComplete=\"off\"\n                fluid\n                label=\"Cargo\"\n                name=\"blueAlliance.scoringDetails.cargo\"\n                onChange={this.changeField}\n                value={blueAlliance.scoringDetails.cargo}\n              />\n              <b>Hab Climb</b>\n              <Form.Group widths=\"equal\">\n                <Form.Input\n                  autoComplete=\"off\"\n                  fluid\n                  label=\"Level 1\"\n                  name=\"blueAlliance.scoringDetails.habClimb.level1\"\n                  onChange={this.changeField}\n                  value={blueAlliance.scoringDetails.habClimb.level1}\n                />\n                <Form.Input\n                  autoComplete=\"off\"\n                  fluid\n                  label=\"Level 2\"\n                  name=\"blueAlliance.scoringDetails.habClimb.level2\"\n                  onChange={this.changeField}\n                  value={blueAlliance.scoringDetails.habClimb.level2}\n                />\n                <Form.Input\n                  autoComplete=\"off\"\n                  fluid\n                  label=\"Level 3\"\n                  name=\"blueAlliance.scoringDetails.habClimb.level3\"\n                  onChange={this.changeField}\n                  value={blueAlliance.scoringDetails.habClimb.level3}\n                />\n              </Form.Group>\n              <b>RP Params</b>\n              <Form.Group widths=\"equal\">\n                <Form.Checkbox\n                  label=\"Hab Docking\"\n                  name=\"blueAlliance.scoringDetails.habDocking\"\n                  onChange={this.changeCheckbox}\n                  checked={blueAlliance.scoringDetails.habDocking}\n                />\n                <Form.Checkbox\n                  label=\"Complete Rocket\"\n                  name=\"blueAlliance.scoringDetails.completeRocket\"\n                  onChange={this.changeCheckbox}\n                  checked={blueAlliance.scoringDetails.completeRocket}\n                />\n              </Form.Group>\n              <b>Blue Fouls</b>\n              <Form.Group widths=\"equal\">\n                <Form.Input\n                  autoComplete=\"off\"\n                  fluid\n                  label=\"Fouls\"\n                  name=\"blueAlliance.fouls\"\n                  onChange={this.changeField}\n                  value={blueAlliance.fouls}\n                />\n                <Form.Input\n                  autoComplete=\"off\"\n                  fluid\n                  label=\"Tech Fouls\"\n                  name=\"blueAlliance.techFouls\"\n                  onChange={this.changeField}\n                  value={blueAlliance.techFouls}\n                />\n              </Form.Group>\n            </div>\n          </Form>\n        )}\n\n        {this.state.matchHistory ? (\n          <Table celled>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell>Match Name</Table.HeaderCell>\n                <Table.HeaderCell>Blue Teams</Table.HeaderCell>\n                <Table.HeaderCell>Blue Score</Table.HeaderCell>\n                <Table.HeaderCell>Red Teams</Table.HeaderCell>\n                <Table.HeaderCell>Red Score</Table.HeaderCell>\n                <Table.HeaderCell>Match State</Table.HeaderCell>\n                <Table.HeaderCell />\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {this.state.matchHistory.map(match => (\n                <Table.Row key={match._id}>\n                  <Table.Cell>\n                    {match.matchType + ' ' + match.matchNumber}\n                  </Table.Cell>\n                  <Table.Cell>{match.blueAlliance.teams.join(', ')}</Table.Cell>\n                  <Table.Cell>{match.blueAlliance.totalPoints}</Table.Cell>\n                  <Table.Cell>{match.redAlliance.teams.join(', ')}</Table.Cell>\n                  <Table.Cell>{match.redAlliance.totalPoints}</Table.Cell>\n                  <Table.Cell>{match.matchStatus}</Table.Cell>\n                  <Table.Cell>\n                    <Button onClick={this.setCurrentMatch} value={match._id}>\n                      Set Current\n                    </Button>\n                  </Table.Cell>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n        ) : null}\n      </Container>\n    );\n  }\n}\n\nexport default AdminDisplay;\n","import React, { Component } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport AudienceDisplay from './matchStateComponents/audienceDisplay';\nimport AdminDisplay from './adminDisplay';\n\nimport openSocket from 'socket.io-client';\n\nclass App extends Component {\n  // socket;\n  constructor(props) {\n    super(props);\n    this.socket = openSocket('http://' + window.location.hostname + ':9000');\n    window.io = this.socket.io;\n  }\n  state = { currentMatch: null };\n\n  render() {\n    return (\n      <Switch>\n        <Route\n          path=\"/admin\"\n          component={() => (\n            <AdminDisplay\n              currentMatch={this.state.currentMatch}\n              socket={this.socket}\n            />\n          )}\n        />\n        <Route\n          path=\"/\"\n          component={() => (\n            <AudienceDisplay\n              currentMatch={this.state.currentMatch}\n              socket={this.socket}\n            />\n          )}\n        />\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}